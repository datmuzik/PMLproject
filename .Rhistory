last_time <- mdy("June 17, 2008", tz="Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
install.packages(“swirl”)
library(swirl)
install_from_swirl(“Exploratory Data Analysis")
swirl()
head(airquality)
xyplot(Ozone~Wind, airquality)
xyplot(Ozone~Wind, airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone~Wind, data=airquality, col="red", pch=8, main="Big Apple Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple
| Data")
xyplot(Ozone ~ Wind, data = airquality, pch=8, col="red", main="Big Apple Data")
xyplot(Ozone~Wind | as.factor(Month), airquality, layout=c(5,1))
xyplot(Ozone~Wind | Month, airquality, layout=c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout=c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit("myLabels.R")
pathtofile("myLabels.R", local=TRUE)
pathtofile("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat | color*cut, diamonds, strip=FALSE, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
xyplot(price~carat | color*cut, diamonds, pch=20, xlab=myxlab, ylab=myylab, main=mymain)
install.packages(“swirl”)
library(swirl)
install_from_swirl(“Exploratory Data Analysis")
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col="blue")
abline(h=0.4, col="red")
5
12
abline(h=0.05, col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col=c("red","orange","purple"), pch=3,cex=2,lwd=2)
mdist(x, y, cx, cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust, mean)
tapply(y,newClust, mean)
points(newCx,newCy,col=cols1, pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers=3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
install.packages(“swirl”)
library(swirl)
install_from_swirl(“Exploratory Data Analysis")
swirl()
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v
svd2$v[,1:2]
svd2$d
dim(faceData)
(svd1$u[,1]) %*% (svd1$d[1])
(svd1$u[,1]) %*% (svd1$d[1])
(svd1$u[,1]) %*% (svd1$d[1])fds
fs
fdsfd
f * v
d
vv
svd1$u[,1] %*% svd1$d[1]
svd1$u[,1] %*% svd1$d[1] %*% t(svd1$v[,1])
svd1$u[,1] * svd1$d[1] * t(svd1$v[,1])
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
myImage(a1)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[[1:2]]) %*% t(svd1$v[,1:2])
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5])
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
?transform
sub1 <- subset(ssd, subject==1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist <- dis(sub1[,1:3])
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(c(sub1[,10:12],maxCon))
mdist <- dist(cbind(sub1[,10:12],maxCon))
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col=unclass(sub1$activity))
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562:563)], centers=6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562:563)], centers=6, nstart=100)
table(kClust$cluster, sub1$activity)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying,1:12], pch=19, ylab="Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown],1:12], pch=19, ylab="Walkdown Cluster")
plot(kClust$centers[walkdown,1:12], pch=19, ylab="Walkdown Cluster")
install.packages(“swirl”)
library(swirl)
install_from_swirl(“Exploratory Data Analysis")
swirl()
dim(pm0)
head(pm0)
cnames
cnames <- strsplit(cnames, '|', fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0, log10(x1)))
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm=True)
sum(negative, na.rm=TRUE)
mean(negative, na.rm=TRUE)
dates <- pm1$Date
str(dates)
dats <- as.Date(as.character(dates, "%Y%m%d"))
dates <- as.Date(as.character(dates, "%Y%m%d"))
dates <- as.Date(as.character(dates), "%Y%m%d")
head(dates)
hist(dates[negative], "month")
str(stie0)
str(site0)
both <- intersect(site0,site1)
?intersect
both
head(pm0)
cnt0 <- subset(pm0,State.Code==36 & county.site %in% both)
cnt1 <- subset(pm1,State.Code==36 & county.site %in% both)
sapply(split(cnt0,cnt0$county.site), nrow)
sapply(split(cnt1,cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code==63 & Site.ID ==2008)
pm1sub <- subset(cnt1, County.Code==63 & Site.ID ==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date, "%Y%m%d"))
dates0 <- as.Date(as.character(pm0sub$Date, "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub, na.rm=TRUE), lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub, na.rm=TRUE), lwd=2)
rng <- range(x0sub, x1sub, na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
mn0
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merge(d0,d1,set="state")
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52), mrg[,2], xlim=c(.5,2.5)))
with(mrg,points(rep(2,52), mrg[,3])
)
?rep
rep(2,52)
segments(rep(1,52),mrg[,2],rep(2,52), mrg[,3])
?segments
mrg[mrg$mean.x < mrg$mean.y,]
install.packages(“swirl”)
library(swirl)
install_from_swirl(“Regression Models")
swirl()
swirl()
install_from_swirl("Regression Models")
swirl()
plot(child~parent, galton)
plot(jitter(child,4)~parent, galton)
?jitter
lm(child~parent)
lm(child~parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd=3, col="red")
summary(regrline)
fit <- lm(child~parent,galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
ols.ic <- fit$coef[1]
ols.slope <- fit$coef[2]
lhs-rhs
all.equal(lhs, rhs)
varChild <- var(child)
varChild <- var(galton$child)
varRes <- var(fit$residuals)
varEst <- var(est(ols.slope, ols.ic))
all.equal(varChild, varRes+varEst)
efit <- lm(accel~mag+dist, attenu)
mean(efit$residuals)
cov(efit$residuals,attenu$mag)
cov(efit$residuals,attenu$dist)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
library(manipulate)
install.packages("manipulate")
library(manipulate)
manipulate(myPlot(beta), beta = slider(0.4, .8, step = 0.02))
cor(gpa_nore, gch_nor)
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
x * w
sum(x*w)/7
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
q2 <- lm(y~x)
summary(q1)
summary(q2)
xc <- x -mean(x)
yc <- y-mean(y)
q2c <- lm(yc~xc)
summary(q2c)
data(mtcars)
q3 <- lm(mpg~weight)
q3 <- lm(mpg~weight, mtcars)
names(mtcars)
q3 <- lm(mpg~wt, mtcars)
summary(q3)
1.5*.4
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
?scale
xn <- scale(x)
xn
(8.58-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
q7 <- lm(x~y)
summary(q7)
q7 <- lm(y~x)
summary(q7)
mean(x)
?lm
?I
library(swirl)
swirl()
ones <- rep(1, nrow(galton))
lm(child~ones+parent-1,galton)
lm(child~parent,galton)
lm(child~1,galton)
head(trees)
fit <- lm(Volume~Girth+Height+Constant-1, trees)
trees2 <- eliminate("Girth", trees)
head(trees2)
fit2 <- lm(Volume~Height+Constant-1,trees2)
lapply(list(fit,fit2),coef)
all <- lm(Fertility ~ . , swiss)
summary(all)
summary(lm(Feritility~agriculture, swiss))
summary(lm(Fertility~agriculture, swiss))
summary(lm(Fertility~Agriculture, swiss))
cor(swiss$Examination,swiss$Education)
cor(swiss$Agriculture,swiss$Education)
makelms()
ec <- swiss$Examination + swiss$Catholic
efit <- lm(Fertility~.+ec,swiss)
all - efit
l
sd
all$coefficients=efit$coefficients
all$coefficients-efit$coefficients
library(swirl)
swirl()
6
dim(InsectSprays)
head(InsectSprays, 15)
sA
summary(sA[,2])
summary(InsectSprays[,2])
sapply(class(InsectSprays))
djfsl
df
sapply(InsectSprays,class)
fit <- lm(count~spray,data=InsectSprays)
summary(fit)
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count~spray-1,InsectSprays)
summary(nfit)$coef
InsectSprays$spray2 <- relevel(InsectSprays$spray, ref="C")
spray2 <- relevel(InsectSprays$spray, "C")
fit2 <- lm(InsectSprays$count~spray2)
summary(fit2)$coef
mean(sC)
(fit$coef[2]-fit$coef[3])/1.6011
dim(hunger)
948
names(hunger)
fit <- lm(Numeric~Year, hunger)
summary(fit)$coef
lmF <- lm(Numeric~Year, hunger[hunger$Sex=="Female"])
lmF <- lm(Numeric~Year, hunger[,Sex=="Female"])
lmF <- lm(Numeric~Year, hunger[Sex=="Female"])
lmF <- lm(Numeric~Year, hunger[Sex=="Female",])
lmF <- lm(Numeric~Year, )
lmF <- lm(Numeric~Year,hunger)
lmF <- lm(hunger$Numeric[hunger$Sex=="Female"]~hunger$Year[hunger$Sex=="Female"])
lmM <- lm(hunger$Numeric[hunger$Sex=="Male"]~hunger$Year[hunger$Sex=="Male"])
lmBoth <- lm(Numeric~Year+Sex,hunger)
summary(lmBoth)
lmInter <- lm(Numerice~Year+Sex+Sex*Year,hunger)
lmInter <- lm(Numeric~Year+Sex+Sex*Year,hunger)
summary(lmInter)
fit <- lm(y~x,out2)
plot(fit,which=1)
fitno <- lm(y~x, out2[-1,])
plot(fit,which=1)
plot(fitno,which=1)
coef(fit)-coef(fitno)
head(dfbeta(fit))
resno <- out2[1,"y"]-predict(fitno,out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
sigma
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd
rstd
rstd <- resid(fit)
rstd <- resid(fit)/(sigma*sqrt(1-hatvalues(fit)))
head(cbind(rstd,rstandard(fit)))
plot(fit,which=3)
plot(fit,which=2)
sigma1 <- deviance(fitno)
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstudent(fit))
dy <- predict(fitno, out2) - predict(fit, out2)
dy/(2*sigma^2)
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
library(swirl)
swirl()
library(swirl)
swirl()
rgp1()
rgp2()
head(swiss)
mdl <- lm(Fertility~.,swiss)
vig(mdl)
vif(mdl)
mdl2 <- lm(Fertility~Agriculture+Education+Catholic+Infant.Mortality,swiss)
vif(mdl2)
x1c <- simbias()
apply(x1c, 1, mean)
fit1 <- lm(Fertility~Agriculture, swiss)
fit3 <- lm(Fertility~Agriculture+Examination+Education, swiss)
anova(fit1, fit3)
deviance(fit3)
d <- deviance(fit3)/43
n <- (deviance(fit1)-deviance(fit3)/2)
n <- (deviance(fit1)-deviance(fit3))/2
n/d
pf(n/d, 2, 43, lower.tail=FALSE)
shapiro.test((fit3$residuals))
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
ravenData
mdl <- glm(ravenWinNum~ravenScore, family=binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0,3,6)))
exp(lodds)/(1+exp(lodds))
summary(mdl)
exp(confint(mdl))
anova(mdl)
qchisq(0.95,1)
var(rpois(1000,50))
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits~date,poisson,hits)
summary(mdl)
exp(confint(mdl,'date'))
which.max(hits[,'visits'])
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95,lambda)
mdl2 <- glm(visits~date,poisson,offset=log(visits+1),hits)
mdl2 <- glm(simplystats~date,poisson,offset=log(visits+1),hits)
qpois(.95,mdl2$fitted.values[704])
data(mtcars)
plot(mtcars$mpg)
data(mtcars)
plot(mtcars@mpg)
plot(mtcars$mpg)
setwd("~/Documents")
setwd("~/Documents/class/PracticalMachineLearning")
trainingData <- read.csv("pml-training.csv",na.strings=c("NA","#DIV/0!",""), header=TRUE)
testingData <- read.csv("pml-testing.csv",na.strings=c("NA","#DIV/0!",""), header=TRUE)
train <- train[, colSums(is.na(train)) == 0]
test <- test[, colSums(is.na(test)) == 0]
trainingData <- trainingData[, colSums(is.na(trainingData)) == 0]
testingData <- testingData[, colSums(is.na(testingData)) == 0]
badvar <- nearZeroVar(trainingData, saveMetrics=TRUE)
train <- trainingData[,badvar$nzv==FALSE]
test <- testingData[,badvar$nzv==FALSE]
install.packages("caret")
library(caret)
badvar <- nearZeroVar(trainingData, saveMetrics=TRUE)
train <- trainingData[,badvar$nzv==FALSE]
test <- testingData[,badvar$nzv==FALSE]
train <- train[-c(1:7)]
test <- test[-c(1:7)]
set.seed(4321)
inTrain <- createDataPartition(train$classe, p = 0.7, list = FALSE)
train1 <- train[inTrain, ]
train2 <- train[-inTrain, ]
library(randomForest)
install.packages("e1071")
library(e1071)
model <- train(classe~., data=train1, method="rf")
control <- trainControl(method = "cv", number = 5)
fit_rpart <- train(classe ~ ., data = train1, method = "rpart", trControl = control)
print(fit_rpart, digits = 4)
fancyRpartPlot(fit_rpart$finalModel)
library(rpart.part)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(fit_rpart$finalModel)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
library(rpart)
fancyRpartPlot(fit_rpart$finalModel)
pred <- predict(model, train2)
model <- train(classe ~ ., data = train1, method = "rpart", trControl = control)
